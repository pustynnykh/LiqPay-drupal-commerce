<?php

/**
 * @file
 *
 * Integration LiqPay payment service and Drupal Commerce Payment system.
 */

include_once 'includes/commerce_liqpay_payments.admin.config.form.inc';
include_once 'includes/LiqPay.php';

define('LIQPAY_CHECKOUT_URL', 'https://www.liqpay.com/api/3/checkout');

/**
 * Implements of hook_menu().
 */
function commerce_liqpay_payments_menu() {
  $items = array();
  $items['liqpay/result'] = array(
    'title' => 'Result of payment through LiqPay',
    'page callback' => 'commerce_liqpay_payments_result',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Implements hook_commerce_payment_method_info().
 */
function commerce_liqpay_payments_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_liqpay_payments'] = array(
    'base' => 'commerce_liqpay_payments',
    'title' => t('Liqpay payment method'),
    'description' => t('Liqpay payment method API v3'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback; generation callback for the payment submission form.
 *
 * @param array $payment_method
 *   An array of the current settings.
 * @param array $pane_values
 *   The current values of the pane.
 * @param array $checkout_pane
 *   The checkout pane array.
 * @param object $order
 *   The order object.
 *
 * @return array
 *   A form snippet for the checkout pane.
 */

function commerce_liqpay_payments_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $method_markup = '<div class="payment-method-image">';
  $method_markup .= theme('image', array(
      'path' => drupal_get_path('module', 'commerce_liqpay_payments') . '/image/liqpay_logo.png',
      'alt' => t('LiqPay'),
      'title' => t('LiqPay'),
      'attributes' => array('class' => 'liqpay-logo')
    )
  );
  $method_markup .= '</div>';
  $method_markup .= '<div class="payment-method-description">' . t('LiqPay - payment platform, designed by PrivatBank specialists, combining Visa Money Transfer technology.') . '</div>';

  $form['liqpay'] = array(
    '#type' => 'markup',
    '#markup' => $method_markup
  );

  return $form;
}

/**
 * Payment method callback: submit form submission.
 * Save LiqPay pay way
 */
function commerce_liqpay_payments_submit_form_submit($payment_method, $pane_form, $pane_values, &$order, $charge) {
  $order->data['commerce_liqpay'] = $pane_values;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_liqpay_payments_redirect_form($form, &$form_state, $order, $payment_method) {
  return commerce_liqpay_payments_build_redirect_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 *
 * Returns form elements that should be submitted to the redirected payment
 * service;
 */
function commerce_liqpay_payments_build_redirect_form($form, &$form_state, $order, $settings) {
  $form = commerce_liqpay_payments_build_form($form, $order, $settings);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay with LiqPay'),
  );
  $form['#action'] = LIQPAY_CHECKOUT_URL;

  return $form;
}

/**
 * Construct form with data for LiqPay server.
 */
function commerce_liqpay_payments_build_form($form, $order, $settings) {
  global $base_url;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Currency for liqpay payment
  $currency = $wrapper->commerce_order_total->currency_code->value();
  // Order total amount
  $amount = $wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($amount, $currency);
  // Private key of liqpay shop
  $private_key = $settings['private_key'];
  // Public key of liqpay shop
  $public_key = $settings['public_key'];
  // Order id
  $order_id = $order->order_id;
  // Operation type for liqpay
  $action = 'pay';
  // Return url for redirect users after payment
  $return_url = $base_url;
  // Server url for response from liqpay with operation variables
  $server_url = $base_url . '/liqpay/result';
  // Get LiqPay order description.
  $text = $settings['description'];
  $description = (drupal_strlen($text)) ? transliteration_get(str_replace('%order', $order->order_id, $text)) : t('Payment for order @order_number at @store', array(
    '@order_number' => $order->order_id,
    '@store' => variable_get('site_name', '')
  ));

  $params = array(
    'version' => '3',
    'public_key' => $public_key,
    'action' => $action,
    'amount' => $amount,
    'currency' => $currency,
    'description' => $description,
    'order_id' => $order_id,
    'result_url' => $return_url,
    'server_url' => $server_url,
    'sandbox' => $settings['sandbox'],
  );

  $liqpay = new LiqPay($public_key, $private_key);
  $data = base64_encode(json_encode($params));
  $signature = $liqpay->cnb_signature($params);

  $form['data'] = array(
    '#type' => 'hidden',
    '#value' => $data,
  );
  $form['signature'] = array(
    '#type' => 'hidden',
    '#value' => $signature,
  );

  return $form;
}


/**
 * Result page callback for LiqPay server response
 */
function commerce_liqpay_payments_result() {
  // Signature
  $post_signature = isset($_POST['signature']) ? $_POST['signature'] : '';
  // Data
  $post_data = isset($_POST['data']) ? $_POST['data'] : '';
  $post_data_decoded = json_decode(base64_decode($post_data), TRUE);

  $lp_order_id = isset($post_data_decoded['order_id']) ? $post_data_decoded['order_id'] : '';
  $order = commerce_order_load($lp_order_id);
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  $private_key = $payment_method['settings']['private_key'];
  $public_key = $payment_method['settings']['public_key'];

  // Server response message for watchdog logging.
  $log = check_plain(print_r($_POST, 1));

  $liqpay = new LiqPay($public_key, $private_key);
  $signature = $liqpay->str_to_sign($private_key . $post_data . $private_key);

  // Variables for validate with signature
  $lp_amount = isset($post_data_decoded['amount']) ? $post_data_decoded['amount'] : '';
  $lp_transaction_id = isset($post_data_decoded['transaction_id']) ? $post_data_decoded['transaction_id'] : '';
  $lp_status = isset($post_data_decoded['status']) ? $post_data_decoded['status'] : '';

  // If $signature = $post_signature payment is right
  if ($signature == $post_signature) {
    // Get price from our order
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    $amount        = $wrapper->commerce_order_total->amount->value();
    // Get real price.
    $amount = commerce_currency_amount_to_decimal($amount, $currency_code);

    // Check paid amount.
    $amount_received = (float) $lp_amount;
    // Compare prices and payment.
    if ($amount_received == $amount) {
      ($lp_status == 'sandbox') ? $lp_status = 'success' : $lp_status;
      // LiqPay transaction status.
      $transaction_info = array(
        'status' => $payment_method['settings'][$lp_status],
        'transaction_id' => (int) $lp_transaction_id,
      );
      commerce_liqpay_payments_create_transaction($order, $transaction_info);

      watchdog('commerce_liqpay', 'Order #@order paid status: @status.', array(
          '@order' => $lp_order_id,
          '@status' => $lp_status
        ), WATCHDOG_INFO);
    } else {
      watchdog('commerce_liqpay', 'Order #@order was not paid: recieved and real order info do not match.<br /> !log', array('@order' => $lp_order_id, '!log' => $log), WATCHDOG_NOTICE);
    }
  } else {
    watchdog('commerce_liqpay', 'An error occurred while processing payment for order #@order: wrong signature.<br /> !log', array('@order' => $lp_order_id, '!log' => $log), WATCHDOG_ERROR);
  }
}

/**
 * Success page callback
 */
function commerce_liqpay_payments_complete() {
  $output = t('The status of the order, you can look at the order page');
  return $output;
}

/**
 * Create LiqPay transaction to specific order.
 */
function commerce_liqpay_payments_create_transaction($order, $transaction_info) {

  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  $transaction              = commerce_payment_transaction_new('commerce_liqpay_payments', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount        = $wrapper->commerce_order_total->amount->value();

  $transaction->amount            = $amount;
  $transaction->currency_code     = $currency_code;
  $transaction->status            = ($transaction_info['status'] == 'sandbox') ? 'success' : $transaction_info['status'];
  $transaction->message_variables = array();
  $transaction->remote_id         = $transaction_info['transaction_id'];
  $transaction->uid = $order->uid;
  if ($transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    $transaction->message = 'Transaction accepted with id @transaction_id';
  }
  elseif ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    $transaction->message = 'Error for the transaction with id @transaction_id';
  }
  elseif ($transaction->status == 'sandbox') {
    $transaction->message = 'Transaction accepted with id @transaction_id';
  }
  $transaction->message_variables = array(
    '@transaction_id' => $transaction_info['transaction_id'],
  );

  commerce_payment_transaction_save($transaction);

}
/**
 * Help function to get transaction statuses.
 */
function commerce_liqpay_payments_statuses() {
  $options = array();
  $statuses = commerce_payment_transaction_statuses();
  if (!empty($statuses)) {
    foreach ($statuses as $status) {
      $options[$status['status']] = $status['title'];
    }
  }
  return $options;
}
